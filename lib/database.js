// Generated by CoffeeScript 1.4.0
(function() {
  var BSON, Db, ObjectId, Server, bindCollection, collectionNames, db, escape, init, mongo, open, server;

  mongo = require('mongodb');

  BSON = mongo.BSONPure;

  Server = mongo.Server;

  Db = mongo.Db;

  ObjectId = function(id) {
    if (!id) {
      return null;
    }
    if (id instanceof BSON.ObjectID) {
      return id;
    }
    try {
      return new BSON.ObjectID(id);
    } catch (err) {
      return id;
    }
  };

  server = new Server('localhost', 27017, {
    auto_reconnect: true
  });

  db = new Db('imgchat', server, {
    safe: true
  });

  escape = function(string) {
    return string.replace(/\./g, '-');
  };

  collectionNames = ['messages'];

  bindCollection = function(name, cb) {
    return db.collection(name, {
      strict: true
    }, function(err, collection) {
      if (err) {
        return db.createCollection(name, function(err, collection) {
          if (err) {
            return cb(err);
          }
          module.exports[name] = collection;
          return cb();
        });
      } else {
        module.exports[name] = collection;
        return cb();
      }
    });
  };

  open = function(collection, done) {
    if (module.exports[collection]) {
      return done(null, module.exports[collection]);
    }
    return db.open(function(err, db) {
      if (err) {
        return done(err);
      }
      return bindCollection(collection, done);
    });
  };

  init = function(done) {
    return db.open(function(err, db) {
      var count, name, _i, _len, _results;
      if (err) {
        console.error('Failed to connect to database', err);
        return done(err);
      }
      count = 0;
      _results = [];
      for (_i = 0, _len = collectionNames.length; _i < _len; _i++) {
        name = collectionNames[_i];
        _results.push((function(name) {
          return bindCollection(name, function(err) {
            if (err) {
              return done(err);
            }
            count++;
            if (count === collectionNames.length) {
              return done(null);
            }
          });
        })(name));
      }
      return _results;
    });
  };

  module.exports = {
    escape: escape,
    open: open,
    init: init,
    ObjectId: ObjectId
  };

}).call(this);
